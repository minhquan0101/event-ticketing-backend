package controllers

import (
	"context"
	"net/http"
	"strconv"
	"time"

	"event-ticketing/config"
	"event-ticketing/models"

	"github.com/gin-gonic/gin"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
)

// GetAllEvents godoc
// @Summary L·∫•y danh s√°ch s·ª± ki·ªán
// @Description Tr·∫£ v·ªÅ t·∫•t c·∫£ s·ª± ki·ªán ho·∫∑c theo t·ª´ kh√≥a t√¨m ki·∫øm
// @Tags Event
// @Produce json
// @Param search query string false "T·ª´ kh√≥a t√¨m ki·∫øm theo t√™n/m√¥ t·∫£"
// @Success 200 {array} models.Event
// @Failure 500 {object} map[string]string
// @Router /api/events [get]
func GetAllEvents(c *gin.Context) {
	eventCollection := config.GetDB().Collection("events")
	search := c.Query("search")

	// Thi·∫øt l·∫≠p filter t√¨m ki·∫øm
	filter := bson.M{}
	if search != "" {
		filter = bson.M{
			"$or": []bson.M{
				{"name": bson.M{"$regex": search, "$options": "i"}},
				{"description": bson.M{"$regex": search, "$options": "i"}},
			},
		}
	}

	cursor, err := eventCollection.Find(context.TODO(), filter)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Kh√¥ng th·ªÉ l·∫•y danh s√°ch s·ª± ki·ªán"})
		return
	}
	defer cursor.Close(context.TODO())

	var events []models.Event
	if err = cursor.All(context.TODO(), &events); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "L·ªói khi ƒë·ªçc d·ªØ li·ªáu"})
		return
	}

	c.JSON(http.StatusOK, events)
}


// GetEventByID godoc
// @Summary L·∫•y chi ti·∫øt s·ª± ki·ªán
// @Description L·∫•y th√¥ng tin s·ª± ki·ªán theo ID
// @Tags Event
// @Produce json
// @Param id path string true "ID s·ª± ki·ªán"
// @Success 200 {object} models.Event
// @Failure 400 {object} map[string]string
// @Failure 404 {object} map[string]string
// @Router /api/events/{id} [get]
func GetEventByID(c *gin.Context) {
	eventCollection := config.GetDB().Collection("events")

	idParam := c.Param("id")
	eventID, err := primitive.ObjectIDFromHex(idParam)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "ID kh√¥ng h·ª£p l·ªá"})
		return
	}

	var event models.Event
	err = eventCollection.FindOne(context.TODO(), bson.M{"_id": eventID}).Decode(&event)
	if err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "Kh√¥ng t√¨m th·∫•y s·ª± ki·ªán"})
		return
	}

	c.JSON(http.StatusOK, event)
}

// CreateEvent godoc
// @Summary T·∫°o s·ª± ki·ªán m·ªõi
// @Description Admin t·∫°o m·ªôt s·ª± ki·ªán m·ªõi
// @Tags Event
// @Accept multipart/form-data
// @Produce json
// @Security BearerAuth
// @Param name formData string true "T√™n s·ª± ki·ªán"
// @Param description formData string false "M√¥ t·∫£"
// @Param location formData string true "ƒê·ªãa ƒëi·ªÉm"
// @Param date formData string true "Ng√†y (RFC3339)"
// @Param total_tickets formData int true "T·ªïng s·ªë v√©"
// @Param available_tickets formData int true "S·ªë v√© kh·∫£ d·ª•ng"
// @Param ticket_price formData number true "Gi√° v√©"
// @Param image formData file true "·∫¢nh s·ª± ki·ªán"
// @Success 201 {object} map[string]string
// @Failure 400 {object} map[string]string
// @Failure 403 {object} map[string]string
// @Failure 500 {object} map[string]string
// @Router /api/events [post]
func CreateEvent(c *gin.Context) {
	eventCollection := config.GetDB().Collection("events")

	role, _ := c.Get("role")
	if role != "admin" {
		c.JSON(http.StatusForbidden, gin.H{"error": "B·∫°n kh√¥ng c√≥ quy·ªÅn t·∫°o s·ª± ki·ªán"})
		return
	}

	name := c.PostForm("name")
	description := c.PostForm("description")
	location := c.PostForm("location")
	dateStr := c.PostForm("date")
	totalTickets := c.PostForm("total_tickets")
	availableTickets := c.PostForm("available_tickets")
	ticketPrice := c.PostForm("ticket_price")

	if name == "" || location == "" || dateStr == "" || totalTickets == "" || availableTickets == "" || ticketPrice == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß c√°c tr∆∞·ªùng b·∫Øt bu·ªôc"})
		return
	}

	date, err := time.Parse(time.RFC3339, dateStr)
	if err != nil || date.Before(time.Now()) {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Ng√†y s·ª± ki·ªán kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ qua"})
		return
	}

	totalTicketsInt, err := strconv.Atoi(totalTickets)
	if err != nil || totalTicketsInt <= 0 {
		c.JSON(http.StatusBadRequest, gin.H{"error": "T·ªïng s·ªë v√© kh√¥ng h·ª£p l·ªá"})
		return
	}
	availableTicketsInt, err := strconv.Atoi(availableTickets)
	if err != nil || availableTicketsInt <= 0 {
		c.JSON(http.StatusBadRequest, gin.H{"error": "S·ªë v√© kh·∫£ d·ª•ng kh√¥ng h·ª£p l·ªá"})
		return
	}
	ticketPriceFloat, err := strconv.ParseFloat(ticketPrice, 64)
	if err != nil || ticketPriceFloat <= 0 {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Gi√° v√© kh√¥ng h·ª£p l·ªá"})
		return
	}

	file, err := c.FormFile("image")
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Vui l√≤ng g·ª≠i file ·∫£nh v·ªõi tr∆∞·ªùng 'image'"})
		return
	}

	filename := primitive.NewObjectID().Hex() + "_" + file.Filename
	savePath := "static/uploads/" + filename
	if err := c.SaveUploadedFile(file, savePath); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Kh√¥ng th·ªÉ l∆∞u ·∫£nh"})
		return
	}

	imageURL := "/static/uploads/" + filename

	event := models.Event{
		Name:            name,
		Description:     description,
		Location:        location,
		Date:            date,
		TotalTickets:    totalTicketsInt,
		AvailableTickets: availableTicketsInt,
		TicketPrice:     ticketPriceFloat,
		ImageURL:        imageURL,
		CreatedAt:       time.Now(),
	}

	_, err = eventCollection.InsertOne(context.TODO(), event)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Kh√¥ng th·ªÉ t·∫°o s·ª± ki·ªán"})
		return
	}

	// üî• Ph√°t s·ª± ki·ªán realtime
	config.SocketServer.BroadcastToNamespace("/", "event_created", gin.H{
		"message": "S·ª± ki·ªán m·ªõi ƒë∆∞·ª£c t·∫°o",
		"event":   event,
	})

	c.JSON(http.StatusCreated, gin.H{"message": "T·∫°o s·ª± ki·ªán th√†nh c√¥ng", "image_url": imageURL})
}

// UpdateEvent godoc
// @Summary C·∫≠p nh·∫≠t s·ª± ki·ªán
// @Description Admin c·∫≠p nh·∫≠t th√¥ng tin m·ªôt s·ª± ki·ªán
// @Tags Event
// @Accept multipart/form-data
// @Produce json
// @Security BearerAuth
// @Param id path string true "ID s·ª± ki·ªán"
// @Param name formData string true "T√™n s·ª± ki·ªán"
// @Param description formData string false "M√¥ t·∫£"
// @Param location formData string true "ƒê·ªãa ƒëi·ªÉm"
// @Param date formData string true "Ng√†y (RFC3339)"
// @Param total_tickets formData int true "T·ªïng s·ªë v√©"
// @Param available_tickets formData int true "S·ªë v√© kh·∫£ d·ª•ng"
// @Param ticket_price formData number true "Gi√° v√©"
// @Param image formData file false "·∫¢nh m·ªõi"
// @Success 200 {object} map[string]string
// @Failure 400 {object} map[string]string
// @Failure 403 {object} map[string]string
// @Failure 500 {object} map[string]string
// @Router /api/events/{id} [put]
func UpdateEvent(c *gin.Context) {
	eventCollection := config.GetDB().Collection("events")

	eventIDParam := c.Param("id")
	eventID, err := primitive.ObjectIDFromHex(eventIDParam)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "ID kh√¥ng h·ª£p l·ªá"})
		return
	}

	role, _ := c.Get("role")
	if role != "admin" {
		c.JSON(http.StatusForbidden, gin.H{"error": "B·∫°n kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t s·ª± ki·ªán"})
		return
	}

	name := c.PostForm("name")
	description := c.PostForm("description")
	location := c.PostForm("location")
	dateStr := c.PostForm("date")
	totalTickets := c.PostForm("total_tickets")
	availableTickets := c.PostForm("available_tickets")
	ticketPrice := c.PostForm("ticket_price")

	date, err := time.Parse(time.RFC3339, dateStr)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Ng√†y kh√¥ng h·ª£p l·ªá, ph·∫£i ·ªü d·∫°ng RFC3339"})
		return
	}

	totalTicketsInt, err := strconv.Atoi(totalTickets)
	if err != nil || totalTicketsInt <= 0 {
		c.JSON(http.StatusBadRequest, gin.H{"error": "T·ªïng v√© kh√¥ng h·ª£p l·ªá"})
		return
	}
	availableTicketsInt, err := strconv.Atoi(availableTickets)
	if err != nil || availableTicketsInt <= 0 {
		c.JSON(http.StatusBadRequest, gin.H{"error": "S·ªë v√© kh·∫£ d·ª•ng kh√¥ng h·ª£p l·ªá"})
		return
	}
	ticketPriceFloat, err := strconv.ParseFloat(ticketPrice, 64)
	if err != nil || ticketPriceFloat <= 0 {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Gi√° v√© kh√¥ng h·ª£p l·ªá"})
		return
	}

	updateMap := bson.M{
		"name":              name,
		"description":       description,
		"location":          location,
		"date":              date,
		"total_tickets":     totalTicketsInt,
		"available_tickets": availableTicketsInt,
		"ticket_price":      ticketPriceFloat,
	}

	file, err := c.FormFile("image")
	if err == nil {
		filename := primitive.NewObjectID().Hex() + "_" + file.Filename
		savePath := "static/uploads/" + filename
		if err := c.SaveUploadedFile(file, savePath); err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "Kh√¥ng th·ªÉ l∆∞u ·∫£nh m·ªõi"})
			return
		}
		imageURL := "/static/uploads/" + filename
		updateMap["image_url"] = imageURL
	}

	_, err = eventCollection.UpdateOne(
		context.TODO(),
		bson.M{"_id": eventID},
		bson.M{"$set": updateMap},
	)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t s·ª± ki·ªán"})
		return
	}

	// üî• Ph√°t s·ª± ki·ªán realtime
	config.SocketServer.BroadcastToNamespace("/", "event_updated", gin.H{
		"message":  "S·ª± ki·ªán ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t",
		"event_id": eventID.Hex(),
	})

	c.JSON(http.StatusOK, gin.H{"message": "C·∫≠p nh·∫≠t s·ª± ki·ªán th√†nh c√¥ng"})
}

// DeleteEvent godoc
// @Summary Xo√° s·ª± ki·ªán
// @Description Admin xo√° m·ªôt s·ª± ki·ªán
// @Tags Event
// @Produce json
// @Security BearerAuth
// @Param id path string true "ID s·ª± ki·ªán"
// @Success 200 {object} map[string]string
// @Failure 400 {object} map[string]string
// @Failure 403 {object} map[string]string
// @Failure 500 {object} map[string]string
// @Router /api/events/{id} [delete]
func DeleteEvent(c *gin.Context) {
	eventCollection := config.GetDB().Collection("events")
	ticketCollection := config.GetDB().Collection("tickets")

	eventIDParam := c.Param("id")
	eventID, err := primitive.ObjectIDFromHex(eventIDParam)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "ID kh√¥ng h·ª£p l·ªá"})
		return
	}

	role, _ := c.Get("role")
	if role != "admin" {
		c.JSON(http.StatusForbidden, gin.H{"error": "B·∫°n kh√¥ng c√≥ quy·ªÅn xo√° s·ª± ki·ªán"})
		return
	}

	count, err := ticketCollection.CountDocuments(context.TODO(), bson.M{"event_id": eventID})
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Kh√¥ng th·ªÉ ki·ªÉm tra v√© c·ªßa s·ª± ki·ªán"})
		return
	}

	if count > 0 {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Kh√¥ng th·ªÉ xo√° s·ª± ki·ªán: ƒë√£ c√≥ v√© ƒë∆∞·ª£c ƒë·∫∑t"})
		return
	}

	_, err = eventCollection.DeleteOne(context.TODO(), bson.M{"_id": eventID})
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Kh√¥ng th·ªÉ xo√° s·ª± ki·ªán"})
		return
	}

	// üî• Ph√°t s·ª± ki·ªán realtime
	config.SocketServer.BroadcastToNamespace("/", "event_deleted", gin.H{
		"message":  "S·ª± ki·ªán ƒë√£ b·ªã xo√°",
		"event_id": eventID.Hex(),
	})

	c.JSON(http.StatusOK, gin.H{"message": "Xo√° s·ª± ki·ªán th√†nh c√¥ng"})
}
